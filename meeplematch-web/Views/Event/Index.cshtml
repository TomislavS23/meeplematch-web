@model IEnumerable<meeplematch_web.Models.EventViewModel>

@{
    ViewData["Title"] = "Index";
}

<h1>All Events</h1>

@* <p> *@
@*     <a asp-action="Create" class="btn btn-primary">Create New</a> *@
@* </p> *@
<div class="row mb-3 justify-content-between">
    <div class="col-2">
        <a asp-action="Create" class="btn btn-primary">Create New</a>
    </div>
    <div class="col-4">
        <input type="text" id="searchInput" class="form-control mr-2" placeholder="Search by Event name or game" />
    </div>
</div>

<div id="eventList">
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Type)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Game)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Location)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.EventDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Capacity)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.MinParticipants)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CreatedBy)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CreatedAt)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.UpdatedAt)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
    @foreach (var item in Model) {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Type)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Game)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Location)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EventDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Capacity)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MinParticipants)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedBy)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedAt)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UpdatedAt)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.IdEvent" class="btn btn-info">Edit</a>
                    <a asp-action="Details" asp-route-id="@item.IdEvent" class="btn btn-warning">Details</a>
                        @* <a asp-action="Delete" asp-route-id="@item.IdEvent" class="btn btn-danger">Delete</a> *@
                        @* <a class="btn btn-danger" href="/Event/Delete/@item.IdEvent">Delete</a> *@
                        <a asp-action="Delete2" asp-route-id="@item.IdEvent" class="btn btn-danger">Delete</a>
                </td>
            </tr>
    }
        </tbody>
    </table>
</div>
@section Scripts {
    <script>
        const searchInput = document.getElementById("searchInput");

        searchInput.addEventListener("input", function () {
            const searchQuery = searchInput.value;

            fetch(`/Event/Index?search=${encodeURIComponent(searchQuery)}`, {
                method: "GET",
                headers: {
                    "X-Requested-With": "XMLHttpRequest"
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Network response was not ok");
                    }
                    return response.text();
                })
                .then(data => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(data, "text/html");
                    const updatedTable = doc.querySelector("table").outerHTML;
                    document.querySelector("#eventList").innerHTML = updatedTable;
                })
                .catch(error => console.error("Error fetching events:", error));
        });
    </script>
}