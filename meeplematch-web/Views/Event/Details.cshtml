@* @model meeplematch_web.Models.EventViewModel *@
@model meeplematch_web.Models.EventWithCommentsAndParticipantsViewModel
@{
    ViewData["Title"] = "Details";
}

<div class="container my-5">
    <div class="d-flex justify-items-center mb-4">
        <h2 class="mb-4 me-3">Event Details</h2>
        <a asp-action="GenerateQrCode" asp-route-id="@Model.Event.IdEvent" class="btn btn-success mb-4">Generate QR</a>
    </div>

    <div class="row justify-content-center align-items-center mb-4">
        <div class="col-md-4">
            <img src="@(!string.IsNullOrEmpty(Model.Event.ImagePath) ? Model.Event.ImagePath : Url.Content("~/assets/images/game_night_placeholder.png"))"
            alt="Event Image" class="img-thumbnail shadow"
            style="width: 100%; max-width: 400px; height: 300px; object-fit: cover;" />
        </div>

        <div class="col-md-6 text-center">
            <div class="mb-2"><strong>Title:</strong> @Model.Event.Name</div>
            <div class="mb-2"><strong>Game:</strong> @Model.Event.Game</div>
            <div class="mb-2"><strong>Type:</strong> @Model.Event.Type</div>
            <div class="mb-2"><strong>Location:</strong> @Model.Event.Location</div>
            <div class="mb-2"><strong>Date & Time:</strong> @Model.Event.EventDate.ToString("f")</div>
            <div class="mb-2"><strong>Min Participants:</strong> @Model.Event.MinParticipants</div>
            <div class="mb-2"><strong>Max Participants:</strong> @Model.Event.Capacity</div>
            <div class="mb-2"><strong>Created By:</strong> @(Model.Event.CreatedByNavigation?.Username ?? "Unknown")</div>
        </div>
    </div>

    @{
        if (!string.IsNullOrWhiteSpace(Model.Event.Description))
        {
            <div class="row justify-content-center mb-4">
                <div class="col-md-8">
                    <h5 class="text-center">Description</h5>
                    <div class="p-3 text-center">
                        @Html.Raw(Model.Event.Description.Replace("\n", "<br />"))
                    </div>
                </div>
            </div>
        }
    }

    <div class="text-center mt-4">
        @if (User.Identity.IsAuthenticated && User.Identity.Name.Equals(Model.Event.CreatedByNavigation?.Username))
        {
            <a asp-action="Edit" asp-route-id="@Model.Event.IdEvent" class="btn btn-info">Edit</a>
        }
        <a asp-action="Index" class="btn btn-secondary ms-2">Back to List</a>
        @if (User.Identity.IsAuthenticated)
        {
            if (!(bool)(Model.Participants.FirstOrDefault(e => e.Username.Equals(User.Identity.Name))?.IsJoined ?? false))
            {
            <form asp-controller="EventParticipant" asp-action="Create" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" name="eventId" value="@Model.Event.IdEvent" />
                    <button type="submit" class="btn btn-success mt-3 p-3 ps-5 pe-5">Join Event</button>
            </form>
            }
            else
            {
                <form asp-controller="EventParticipant" asp-action="DeleteUserFromEvent" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="eventId" value="@Model.Event.IdEvent" />
                    <input type="hidden" name="userId" value="@Model.Participants.FirstOrDefault(e => e.Username.Equals(User.Identity.Name))?.IdUser" />
                    <button type="submit" class="btn btn-success mt-3 p-3 ps-5 pe-5">Already Joined</button>
                </form>
            }
        }
        @if (User.Identity.IsAuthenticated && User.Identity.Name.Equals(Model.Event.CreatedByNavigation?.Username))
        {
            <br />
            <h4 class="mb-4">Users joined</h4>
            @await Html.PartialAsync("../EventParticipant/_EventParticipantPartial", Model.Participants)
        }
    </div>
</div>

<div class="container my-5">
    <h4 class="mb-4">Comments</h4>
    @await Html.PartialAsync("../EventComment/_EventCommentsPartial", Model.Comments, ViewData)
    <br />
    @if (User.Identity.IsAuthenticated)
    {
        <h5 class="mb-4">Add a Comment</h5>
        <form asp-controller="EventComment" asp-action="Create" method="post">
            @Html.AntiForgeryToken()
        <input type="hidden" name="EventId" value="@Model.Event.IdEvent" />
        <div class="form-group">
            <label for="Comment" class="form-label mb-2">Comment</label>
            <textarea name="Comment" class="form-control mb-2" rows="3" placeholder="Write your comment here..."></textarea>
            <span class="text-danger field-validation-valid" data-valmsg-for="Comment" data-valmsg-replace="true"></span>
        </div>
        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
            <button type="submit" class="btn btn-primary mb-2">Post Comment</button>
        </div>
        </form>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var editModal = document.getElementById('editCommentModal');
            var editForm = document.getElementById('editCommentForm');

            editModal.addEventListener('show.bs.modal', function (event) {
                var button = event.relatedTarget;
                document.getElementById('editCommentId').value = button.getAttribute('data-id');
                document.getElementById('editEventId').value = button.getAttribute('data-event-id');
                document.getElementById('editCommentText').value = button.getAttribute('data-comment');
                editForm.action = `/EventComment/Edit?eventId=${button.getAttribute('data-event-id')}&eventCommentId=${button.getAttribute('data-id')}`;
            });
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var deleteModal = document.getElementById('deleteCommentModal');
            deleteModal.addEventListener('show.bs.modal', function (event) {
                var button = event.relatedTarget;
                document.getElementById('deleteCommentId').value = button.getAttribute('data-comment-id');
                document.getElementById('deleteEventId').value = button.getAttribute('data-event-id');
                document.getElementById('deleteUsername').textContent = button.getAttribute('data-username');
                document.getElementById('deleteCommentText').textContent = button.getAttribute('data-comment');
                document.getElementById('deleteCreatedAt').textContent = button.getAttribute('data-created');
            });
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var deleteModal = document.getElementById('deleteParticipantModal');
            deleteModal.addEventListener('show.bs.modal', function (event) {
                var button = event.relatedTarget;
                if (!button) console.log('no button');
                document.getElementById('deleteEventId').value = button.getAttribute('data-event-id');
                document.getElementById('deleteUserId').value = button.getAttribute('data-user-id');
                document.getElementById('deleteUsername').textContent = button.getAttribute('data-username');
                document.getElementById('deleteJoinedAt').textContent = new Date(button.getAttribute('data-joined-at')).toLocaleString();
            });
        });
    </script>
}